{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Downloads/Posts/src/Components/Post.js\";\nimport React, { PureComponent } from 'react';\nimport { Link } from \"react-router-dom\";\nimport './Post.css';\n\nclass Post extends PureComponent {\n  constructor(props) {\n    super(props);\n    const _this$props = this.props,\n          posts = _this$props.posts,\n          users = _this$props.users,\n          match = _this$props.match;\n    this.postId = match.params.id;\n    const post = posts.find(post => {\n      return post.id == this.postId;\n    });\n    const user = post ? users.find(user => {\n      return user.id == post.userId;\n    }) : null;\n    this.state = {\n      post,\n      user,\n      username: user ? user.username : '',\n      comments: null,\n      postComments: null\n    };\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n    fetch('https://jsonplaceholder.typicode.com/comments').then(response => response.json()).then(json => (() => {\n      if (this._mounted) {\n        this.setState({\n          comments: json\n        }, () => {\n          this.getPostComments();\n        });\n      }\n    })());\n  }\n\n  componentDidUpdate(prevProps) {\n    const _this$props2 = this.props,\n          posts = _this$props2.posts,\n          users = _this$props2.users;\n\n    if (prevProps.posts !== posts && posts) {\n      (() => {\n        this.setState({\n          post: posts.find(post => {\n            return post.id == this.postId;\n          })\n        }, () => {\n          this.getUsername();\n          this.getPostComments();\n        });\n      })();\n    }\n\n    if (prevProps.users !== users && users) {\n      (() => {\n        this.setState({\n          user: this.state.post ? users.find(user => {\n            return user.id == this.state.post.userId;\n          }) : null\n        }, () => {\n          this.getUsername();\n        });\n      })();\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  getPostComments() {\n    const _this$state = this.state,\n          post = _this$state.post,\n          comments = _this$state.comments;\n\n    if (post && post.id && comments) {\n      const postComments = comments.filter(comment => {\n        return comment.postId == post.id;\n      });\n      this.setState({\n        postComments\n      });\n    }\n  }\n\n  getUsername() {\n    const _this$state2 = this.state,\n          user = _this$state2.user,\n          post = _this$state2.post,\n          postComments = _this$state2.postComments;\n    const users = this.props.users;\n\n    if (user && user.username) {\n      this.setState({\n        username: user.username\n      });\n    } else if (post && users) {\n      const author = users.find(user => {\n        return user.id == post.userId;\n      });\n      this.setState({\n        username: author.username\n      });\n    }\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          post = _this$state3.post,\n          username = _this$state3.username,\n          postComments = _this$state3.postComments;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: \"back-link\",\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Back to all posts\"), post && React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Title: \", post.title), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Author: \", username)), postComments && React.createElement(\"div\", {\n      className: \"comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"comment-title-header header border-right border-bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Subject\"), React.createElement(\"div\", {\n      className: \"comment-email-header header border-right border-bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Email\"), React.createElement(\"div\", {\n      className: \"comment-body-header header border-bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Comment\"), postComments.map((comment, index) => {\n      return React.createElement(React.Fragment, {\n        key: comment.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"comment-title border-right\".concat(index < postComments.length - 1 ? ' border-bottom' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, comment.name), React.createElement(\"div\", {\n        className: \"comment-email border-right\".concat(index < postComments.length - 1 ? ' border-bottom' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, comment.email), React.createElement(\"div\", {\n        className: \"comment-body\".concat(index < postComments.length - 1 ? ' border-bottom' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, comment.body));\n    })));\n  }\n\n}\n\nexport default Post;","map":{"version":3,"sources":["/Users/admin/Downloads/Posts/src/Components/Post.js"],"names":["React","PureComponent","Link","Post","constructor","props","posts","users","match","postId","params","id","post","find","user","userId","state","username","comments","postComments","componentDidMount","_mounted","fetch","then","response","json","setState","getPostComments","componentDidUpdate","prevProps","getUsername","componentWillUnmount","filter","comment","author","render","title","map","index","length","name","email","body"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Link } from \"react-router-dom\";\nimport './Post.css';\n\nclass Post extends PureComponent {\n  constructor(props) {\n    super(props);\n    const { posts, users, match } = this.props;\n    this.postId = match.params.id;\n    const post = posts.find(post => { return post.id == this.postId });\n    const user = post ? users.find(user => { return user.id == post.userId }) : null;\n    this.state = {\n      post,\n      user,\n      username: user ? user.username : '',\n      comments: null,\n      postComments: null\n    };\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n    fetch('https://jsonplaceholder.typicode.com/comments')\n      .then(response => response.json())\n      .then(json => (() => {\n        if (this._mounted) {\n          this.setState({ comments: json }, () => {\n          this.getPostComments();\n        });\n        }\n      })());\n  }\n\n  componentDidUpdate(prevProps) {\n    const { posts, users } = this.props;\n    if (prevProps.posts !== posts && posts) {\n      (() => {\n        this.setState({ post: posts.find(post => { return post.id == this.postId }) }, () => {\n          this.getUsername();\n          this.getPostComments();\n        });\n      })();\n    }\n    if (prevProps.users !== users && users) {\n      (() => {\n        this.setState({ user: this.state.post ? users.find(user => { return user.id == this.state.post.userId }) : null }, () => {\n          this.getUsername();\n        });\n      })();\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  getPostComments() {\n    const { post, comments } = this.state;\n    if (post && post.id && comments) {\n      const postComments = comments.filter(comment => { return comment.postId == post.id });\n      this.setState({ postComments });\n    }\n  }\n\n  getUsername() {\n    const { user, post, postComments } = this.state;\n    const { users } = this.props;\n    if (user && user.username) {\n      this.setState({ username: user.username });\n    } else if (post && users) {\n      const author = users.find(user => { return user.id == post.userId });\n      this.setState({ username: author.username });\n    }\n  }\n\n  render() {\n    const { post, username, postComments } = this.state;\n    return (\n      <div>\n        <Link className=\"back-link\" to=\"/\">Back to all posts</Link>\n        {\n          post &&\n          <React.Fragment>\n            <div>Title: {post.title}</div>\n            <div>Author: {username}</div>\n          </React.Fragment>\n        }\n        {\n          postComments &&\n          <div className=\"comments\">\n            <div className=\"comment-title-header header border-right border-bottom\">Subject</div>\n            <div className=\"comment-email-header header border-right border-bottom\">Email</div>\n            <div className=\"comment-body-header header border-bottom\">Comment</div>\n            {\n              postComments.map((comment, index) => {\n                return (\n                  <React.Fragment key={comment.id}>\n                    <div className={`comment-title border-right${index < postComments.length - 1 ? ' border-bottom' : ''}`}>{comment.name}</div>\n                    <div className={`comment-email border-right${index < postComments.length - 1 ? ' border-bottom' : ''}`}>{comment.email}</div>\n                    <div className={`comment-body${index < postComments.length - 1 ? ' border-bottom' : ''}`}>{comment.body}</div>\n                  </React.Fragment>\n                );\n              })\n            }\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}